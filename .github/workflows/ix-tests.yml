name: IX Model Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 3 AM UTC
    - cron: '0 3 * * 1'

jobs:
  test-matrix:
    name: Test ${{ matrix.resin-type }} on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        resin-type: ['SAC', 'WAC_H', 'WAC_Na']
        include:
          # Additional test configurations
          - os: ubuntu-latest
            python-version: '3.10'
            resin-type: 'SAC'
            test-kinetics: true
          - os: ubuntu-latest
            python-version: '3.10'
            resin-type: 'SAC'
            test-fouling: true
          - os: windows-latest
            python-version: '3.10'
            resin-type: 'SAC'
            test-graybox: true
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install PHREEQC (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Download and install PHREEQC
        wget https://water.usgs.gov/water-resources/software/PHREEQC/phreeqc-3.8.6-17100-x64-linux.tar.gz
        tar -xzf phreeqc-3.8.6-17100-x64-linux.tar.gz
        cd phreeqc-3.8.6-17100
        sudo ./configure --prefix=/usr/local
        sudo make
        sudo make install
        echo "/usr/local/bin" >> $GITHUB_PATH
    
    - name: Install PHREEQC (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Download PHREEQC installer
        Invoke-WebRequest -Uri "https://water.usgs.gov/water-resources/software/PHREEQC/phreeqc-3.8.6-17100-x64.msi" -OutFile "phreeqc-installer.msi"
        # Silent install
        Start-Process msiexec.exe -Wait -ArgumentList '/i phreeqc-installer.msi /quiet'
        # Add to PATH
        echo "C:\Program Files\USGS\phreeqc-3.8.6-17100-x64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Install PHREEQC (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install via homebrew if available, otherwise compile from source
        if command -v brew &> /dev/null; then
          brew install phreeqc || true
        else
          wget https://water.usgs.gov/water-resources/software/PHREEQC/phreeqc-3.8.6-17100.tar.gz
          tar -xzf phreeqc-3.8.6-17100.tar.gz
          cd phreeqc-3.8.6-17100
          ./configure --prefix=/usr/local
          make
          sudo make install
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-timeout
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run basic IX tests
      env:
        RESIN_TYPE: ${{ matrix.resin-type }}
      run: |
        pytest tests/test_ion_exchange_transport_0D.py -v --timeout=300
    
    - name: Run 3-step pattern test
      run: |
        python tests/test_3step_fix.py
    
    - name: Run comprehensive test suite
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      run: |
        python tests/test_all_fixes.py
    
    - name: Run kinetics tests
      if: matrix.test-kinetics
      run: |
        pytest tests/test_kinetic_model.py -v --timeout=300
    
    - name: Run fouling tests
      if: matrix.test-fouling
      run: |
        pytest tests/test_fouling_model.py -v --timeout=300
    
    - name: Run GrayBox tests
      if: matrix.test-graybox
      run: |
        python tests/test_simple_graybox.py
        python tests/test_cross_database_graybox.py
    
    - name: Run performance benchmarks
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest' && matrix.resin-type == 'SAC'
      run: |
        python tests/benchmark_ix_performance.py
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.resin-type }}
        path: |
          test-results/
          *.log

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest --cov=watertap_ix_transport --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install jupyter nbconvert
    
    - name: Test notebook execution
      run: |
        # Convert and run notebooks
        for notebook in notebooks/*.ipynb; do
          echo "Testing $notebook"
          jupyter nbconvert --to python "$notebook"
          python "${notebook%.ipynb}.py" || echo "Failed: $notebook"
        done
    
    - name: Test MCP server integration
      run: |
        # Test that the MCP server starts correctly
        python server.py --test-mode || echo "Server test failed"
    
    - name: Run end-to-end tests
      run: |
        python tests/test_e2e_ix_design.py